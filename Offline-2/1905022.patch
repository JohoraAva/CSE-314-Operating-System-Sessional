diff --git a/1905022.patch b/1905022.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 39a99d7..3b626b6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1f325ef 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,11 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
+
+
+//exit 
+void exit_qemu(void);
 
 // bio.c
 void            binit(void);
@@ -106,6 +111,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(void);
+int             history(int, uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..c0e1c54 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,18 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
+        #scratch[40];
         
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+
+        #exit 
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +128,15 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+        #exit offline-2
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+loop:
+        j loop
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..4a79618 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,8 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+
+  
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..a65873a 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -322,6 +322,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->traceId=p->traceId;
+
   return pid;
 }
 
@@ -681,3 +683,22 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+//history 
+
+int history(int id,uint64 st)
+{
+
+  struct proc *p = myproc();
+  struct syscall_stat his_id;
+  his_id=*myproc()->history[id];
+
+  //  printf("%d:\tsyscall: %s,#: %d,time: %d\n",id,his_id.name,his_id.count,his_id.accum_time);
+
+   if(copyout(p->pagetable, st, (char *)&his_id, sizeof(his_id)) < 0)
+      return -1;
+    return 0;
+
+
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8c10299 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,5 @@
+#include "kernel/syscall_stat.h"
+
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -81,6 +83,16 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+struct args
+{
+  int type;
+  // 0,1,2
+  int int32;
+  char * str;
+  uint64 uInt64;
+
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +116,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //offline-2
+
+  int traceId;                   //trace id
+  int cur_trace;                  //to print the string properly
+  struct args arg_type[5];      //arg type;as highest argument=6
+  int total_arg;
+  struct syscall_stat *history[24];         //history id
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..849b2e8 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,8 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+//prev-5 ,cur-6 (extra for= exit)
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +77,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5]=0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +89,9 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void 
+exit_qemu(void)
+{
+  timer_scratch[0][5]=1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2000b85 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -57,6 +57,8 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  myproc()->arg_type[n].type=0; 
+  myproc()->arg_type[n].int32=*ip;
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +68,8 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  myproc()->arg_type[n].type=2; 
+  myproc()->arg_type[n].uInt64=*ip;
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,7 +80,15 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+
+  myproc()->arg_type[n].type=1; 
+  myproc()->arg_type[n].str=buf;
+
+  int i=fetchstr(addr, buf, max);
+  // printing string
+  if(myproc()->cur_trace==myproc()->traceId)
+    printf("%s",buf);
+  return i;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +113,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void); 
+extern uint64 sys_history(void);
+extern uint64 sys_exit_qemu(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +141,29 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_exit_qemu] sys_exit_qemu,
 };
 
+
+
+static char *sysCall[]={"","fork","exit","wait","pipe","read","kill","exec","fstat","chdir","dup","getpid","sbrk","sleep","uptime","open","write","mknod","unlink","link","mkdir","close","trace"};
+
+static struct syscall_stat sysHistory[]= {{"",0,0,0},{"fork",1,0,0},{"exit",2,0,0},{"wait",3,0,0},{"pipe",4,0,0},{"read",5,0,0},
+                                              {"kill",6,0,0},{"exec",7,0,0},{"fstat",8,0,0},{"chdir",9,0,0},{"dup",10,0,0},{"getpid",11,0,0},{"sbrk",12,0,0},
+                                              {"sleep",13,0,0},{"uptime",14,0,0},{"open",15,0,0},{"write",16,0,0},{"mknod",17,0,0},{"unlink",18,0,0},
+                                              {"link",19,0,0},{"mkdir",20,0,0},{"close",21,0,0},{"trace",22,0,0},{"history",23,0,0}};
+void 
+print(struct args arg_type)
+{
+  if(arg_type.type==0)
+    printf("%d",arg_type.int32);
+  else if(arg_type.type==2)
+     printf("%p",arg_type.uInt64);
+ 
+}
+
 void
 syscall(void)
 {
@@ -138,7 +174,52 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+   
+   //offline-2 
+
+    acquire(&tickslock);
+    int start_time=ticks;
+    release(&tickslock);
+    p->cur_trace=num;
+
+    if(p->traceId==num)
+      printf("pid: %d, syscall: %s, args: (",
+            p->pid, sysCall[num]);
+
+
     p->trapframe->a0 = syscalls[num]();
+
+
+    acquire(&tickslock);
+    int end_time=ticks;
+    release(&tickslock);
+
+
+    //trace printing
+    if(p->traceId==num)
+    {
+        
+        int i;
+        for(i=0;i<p->total_arg;i++)
+        {
+          print(p->arg_type[i]);
+          if(i!=p->total_arg-1)
+              printf(", ");
+        }
+        printf("), return: %d\n",p->trapframe->a0);
+
+    }
+
+    
+    //history 
+    sysHistory[num].count++;
+    
+    sysHistory[num].accum_time+=end_time-start_time;
+    int i;
+    for(i=0;i<24;i++)
+    {
+      p->history[i]=&sysHistory[i];
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..96de47f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+#define SYS_exit_qemu 24
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..f16bbfb
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,7 @@
+struct syscall_stat
+{
+  char name[16];
+  int id;
+  int count;
+  int accum_time;
+};
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..2989549 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -56,6 +56,7 @@ sys_dup(void)
 {
   struct file *f;
   int fd;
+  myproc()->total_arg=1;
 
   if(argfd(0, 0, &f) < 0)
     return -1;
@@ -71,6 +72,7 @@ sys_read(void)
   struct file *f;
   int n;
   uint64 p;
+  myproc()->total_arg=3;
 
   argaddr(1, &p);
   argint(2, &n);
@@ -85,6 +87,7 @@ sys_write(void)
   struct file *f;
   int n;
   uint64 p;
+  myproc()->total_arg=3;
   
   argaddr(1, &p);
   argint(2, &n);
@@ -99,6 +102,7 @@ sys_close(void)
 {
   int fd;
   struct file *f;
+  myproc()->total_arg=1;
 
   if(argfd(0, &fd, &f) < 0)
     return -1;
@@ -112,6 +116,7 @@ sys_fstat(void)
 {
   struct file *f;
   uint64 st; // user pointer to struct stat
+  myproc()->total_arg=2;
 
   argaddr(1, &st);
   if(argfd(0, 0, &f) < 0)
@@ -125,6 +130,7 @@ sys_link(void)
 {
   char name[DIRSIZ], new[MAXPATH], old[MAXPATH];
   struct inode *dp, *ip;
+  myproc()->total_arg=2;
 
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
     return -1;
@@ -192,6 +198,7 @@ sys_unlink(void)
   struct dirent de;
   char name[DIRSIZ], path[MAXPATH];
   uint off;
+  myproc()->total_arg=1;
 
   if(argstr(0, path, MAXPATH) < 0)
     return -1;
@@ -309,6 +316,7 @@ sys_open(void)
   struct file *f;
   struct inode *ip;
   int n;
+  myproc()->total_arg=2;
 
   argint(1, &omode);
   if((n = argstr(0, path, MAXPATH)) < 0)
@@ -375,6 +383,7 @@ sys_mkdir(void)
 {
   char path[MAXPATH];
   struct inode *ip;
+  myproc()->total_arg=1;
 
   begin_op();
   if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
@@ -392,6 +401,7 @@ sys_mknod(void)
   struct inode *ip;
   char path[MAXPATH];
   int major, minor;
+  myproc()->total_arg=3;
 
   begin_op();
   argint(1, &major);
@@ -412,6 +422,7 @@ sys_chdir(void)
   char path[MAXPATH];
   struct inode *ip;
   struct proc *p = myproc();
+  myproc()->total_arg=1;
   
   begin_op();
   if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
@@ -437,6 +448,7 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
+  myproc()->total_arg=2;
 
   argaddr(1, &uargv);
   if(argstr(0, path, MAXPATH) < 0) {
@@ -481,6 +493,7 @@ sys_pipe(void)
   struct file *rf, *wf;
   int fd0, fd1;
   struct proc *p = myproc();
+  myproc()->total_arg=1;
 
   argaddr(0, &fdarray);
   if(pipealloc(&rf, &wf) < 0)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..683f175 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -11,6 +11,7 @@ sys_exit(void)
 {
   int n;
   argint(0, &n);
+  myproc()->total_arg=1; 
   exit(n);
   return 0;  // not reached
 }
@@ -18,12 +19,14 @@ sys_exit(void)
 uint64
 sys_getpid(void)
 {
+  myproc()->total_arg=0;
   return myproc()->pid;
 }
 
 uint64
 sys_fork(void)
 {
+  myproc()->total_arg=0;
   return fork();
 }
 
@@ -32,6 +35,7 @@ sys_wait(void)
 {
   uint64 p;
   argaddr(0, &p);
+  myproc()->total_arg=1; 
   return wait(p);
 }
 
@@ -42,6 +46,7 @@ sys_sbrk(void)
   int n;
 
   argint(0, &n);
+  myproc()->total_arg=1; 
   addr = myproc()->sz;
   if(growproc(n) < 0)
     return -1;
@@ -55,6 +60,7 @@ sys_sleep(void)
   uint ticks0;
 
   argint(0, &n);
+  myproc()->total_arg=1; 
   acquire(&tickslock);
   ticks0 = ticks;
   while(ticks - ticks0 < n){
@@ -74,6 +80,7 @@ sys_kill(void)
   int pid;
 
   argint(0, &pid);
+  myproc()->total_arg=1; 
   return kill(pid);
 }
 
@@ -89,3 +96,42 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_trace(void)
+{
+  int id;
+  myproc()->total_arg=1;
+  argint(0,&id);
+
+  myproc()->traceId=id;
+
+  return 0;
+}
+
+
+uint64
+sys_history(void)
+{
+  int id;
+  uint64 stat;
+  myproc()->total_arg=2;
+  argint(0,&id);
+  argaddr(1, &stat);
+
+  uint64 result=history(id,stat);
+ 
+
+
+  return result;
+}
+
+
+uint64
+sys_exit_qemu(void)
+{
+  exit_qemu();
+
+  return 0;
+}
diff --git a/user/exit.c b/user/exit.c
new file mode 100644
index 0000000..01d407b
--- /dev/null
+++ b/user/exit.c
@@ -0,0 +1,12 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  
+  exit_qemu();
+  exit(0);
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..ef36335
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,33 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+
+  struct syscall_stat stat;
+  int i;
+
+
+  if(argc < 2)
+  {
+    for(i=1;i<24;i++)
+    {
+      history(i,&stat);
+      printf("%d:\tsyscall: %s, #: %d, time: %d\n",i,stat.name,stat.count,stat.accum_time);
+    }
+  }
+
+  else
+  {
+    history(atoi(argv[1]),&stat);
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n",atoi(argv[1]),stat.name,stat.count,stat.accum_time);
+  }
+
+
+
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..9649b00 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscall_stat*);
+int exit_qemu(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..07cf851 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("exit_qemu");
\ No newline at end of file

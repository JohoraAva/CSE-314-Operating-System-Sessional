diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..0bb8a85
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,28 @@
+{
+    "tasks": [
+        {
+            "type": "cppbuild",
+            "label": "C/C++: gcc-9 build active file",
+            "command": "/usr/bin/gcc-9",
+            "args": [
+                "-fdiagnostics-color=always",
+                "-g",
+                "${file}",
+                "-o",
+                "${fileDirname}/${fileBasenameNoExtension}"
+            ],
+            "options": {
+                "cwd": "${fileDirname}"
+            },
+            "problemMatcher": [
+                "$gcc"
+            ],
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+            "detail": "Task generated by Debugger."
+        }
+    ],
+    "version": "2.0.0"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..aa8be30 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/rand.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d842b1b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+
+// offline 3
+int             settickets(int); 
+int             getpinfo(uint64); 
+int             getCurrentActiveTickets(int); 
+int             getRunningProcesses(int);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -187,3 +194,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// rand.c
+long genrand(int); // offline 3
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..3d3d48d 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,9 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+
+//offline-3
+#define TIME_LIMIT_1 1 
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..fb15eb7 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -112,8 +113,13 @@ allocproc(void)
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->pid!=0) continue;
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      p->tickets_original = DEFAULT_TICKET_COUNT;
+      p->tickets_current = DEFAULT_TICKET_COUNT;
+      p->time_slices = 0;
+      p->inQ=1;
       goto found;
     } else {
       release(&p->lock);
@@ -162,7 +168,7 @@ freeproc(struct proc *p)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
-  p->pid = 0;
+  //p->pid = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -318,10 +324,18 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+  int tickets_original = 0;
+  acquire(&p->lock);
+  tickets_original = p->tickets_original;
+  release(&p->lock);
+
   acquire(&np->lock);
+  np->tickets_original = tickets_original; 
+  np->tickets_current = tickets_original;
+  np->time_slices = 0;
   np->state = RUNNABLE;
+  np->inQ=p->inQ;
   release(&np->lock);
-
   return pid;
 }
 
@@ -441,6 +455,7 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+static int last_proc=0;
 void
 scheduler(void)
 {
@@ -452,25 +467,136 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+    acquire(&tickslock);
+    int cur_time=ticks;
+    release(&tickslock);
+    if(!(cur_time-proc[last_proc].last_scheduled_time>TIME_LIMIT_1 || proc[last_proc].state!= RUNNABLE))
+    {
+      continue;
+    }
+
+
+
+    if(getRunningProcesses(1))
+    {
+      acquire(&tickslock);
+      int cur_time=ticks;
+      release(&tickslock);
+
+      if(cur_time-proc[last_proc].last_scheduled_time>TIME_LIMIT_1)
+      {
+        proc[last_proc].inQ=2;
+        if(getRunningProcesses(1)==0)
+              continue;
+      }
+
+      if(getCurrentActiveTickets(1)==0)
+      {
+      for(p = proc; p < &proc[NPROC]; p++) 
+      {
+          acquire(&p->lock);
+          p->tickets_current = p->tickets_original;
+          release(&p->lock);
+      }
+        continue;
+      }
+
+        
+      int random = genrand(getCurrentActiveTickets(1))+1;
+      int cumsum = 0;
+      int taken = 0;
+
+      int i=0;
+     for(p = proc; p < &proc[NPROC] && taken==0; p++) 
+     {
+       acquire(&p->lock);
+
+       if(p->state== RUNNABLE)
+       {
+        cumsum+=p->tickets_current;
+        if( cumsum >= random && p->tickets_current != 0 && p->inQ == 1)
+        {
+          taken = 1;
+
+          proc[i].tickets_current--;
+          // acquire(&tickslock);
+          // cur_time=ticks;
+          // release(&tickslock);
+          // proc[last_proc].total_time+=cur_time-proc[last_proc].last_scheduled_time;
+          proc[last_proc].time_slices++;
+          p->state=RUNNING;
+          c->proc=p;
+          swtch(&c->context, &p->context);  
+        
+          last_proc=i;
+          acquire(&tickslock);
+          cur_time=ticks;
+          release(&tickslock);
+          p->last_scheduled_time=cur_time;    
+          c->proc = 0;
+        }
+      }
+      release(&p->lock);
+      i++;
+    }
+
+    }
+
+  //RR 
+  else
+  {
+    if(proc[last_proc].state!= RUNNABLE)
+    {
+      proc[last_proc].inQ=1;
+
+      acquire(&tickslock);
+      int cur_time=ticks;
+      release(&tickslock);
+      proc[last_proc].last_scheduled_time=cur_time;
+    }
+    int i=0, j;
+    for(i=last_proc+1, j=0; j<NPROC; i=(i+1)%NPROC, j++)
+     {
+        p = &proc[i];
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->inQ==2) 
+        {
+        // printf("ashche\n");
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
+          
+          // acquire(&tickslock);
+          // cur_time=ticks;
+          // release(&tickslock);
+          // proc[last_proc].total_time+=cur_time-proc[last_proc].last_scheduled_time;
+          proc[last_proc].time_slices++;
+          // printf("error = %d : %d\n", last_proc, ticks-proc[last_proc].last_scheduled_time);
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);  
+          // printf("error\n");
+          last_proc=i;
+          acquire(&tickslock);
+          cur_time=ticks;
+          release(&tickslock);
+          proc[last_proc].last_scheduled_time=cur_time;
+
+          i++;
         // Process is done running for now.
         // It should have changed its p->state before coming back.
-        c->proc = 0;
+          c->proc = 0;
+          j = NPROC+1;
+        
+        }
+        release(&p->lock);
       }
-      release(&p->lock);
+      
     }
   }
 }
 
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -681,3 +807,83 @@ procdump(void)
     printf("\n");
   }
 }
+
+// problem
+int settickets(int ticketNumber){
+
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets_original = ticketNumber;
+  p->tickets_current = ticketNumber;
+  p->time_slices = 0;
+  release(&p->lock);
+
+  return 0;
+}
+
+int getpinfo(uint64 addr){
+
+  struct proc *mp = myproc();
+  struct proc *p;
+  struct pstat pst;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    pst.pid[i] = p->pid;
+    if(p->state== UNUSED)
+      pst.inuse[i]=0;
+    else 
+      pst.inuse[i]=1;
+
+    pst.tickets_original[i] = p->tickets_original;
+    pst.tickets_current[i] = p->tickets_current;
+    pst.time_slices[i] = p->time_slices;
+    pst.inQ[i]=p->inQ;
+    // pst.total_time[i]=p->total_time;
+    release(&p->lock);
+    i++;
+  }
+  if(copyout(mp->pagetable, addr, (char *)&pst, sizeof(pst)) < 0)
+    return -1;
+  return 0;
+}
+
+int getCurrentActiveTickets(int n){
+
+  struct proc *p;
+
+
+  int tickets = 0;
+  
+    for(p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if( p->state == RUNNABLE && p->inQ==n )
+        tickets+=p->tickets_current;
+      release(&p->lock);
+    }
+  
+  
+  return tickets;
+}
+
+int getRunningProcesses(int n)
+{
+  struct proc *p;
+
+
+  int count = 0;
+  
+  
+    for(p = proc; p < &proc[NPROC]; p++)
+    {
+
+      acquire(&p->lock);
+      if( p->state == RUNNABLE && p->inQ==n)
+        count++;
+      release(&p->lock);
+    }
+  
+  
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..5374fc6 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,14 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  // offline 3
+  int tickets_original; 
+  int tickets_current; 
+  int time_slices;   
+  int inQ;
+  int last_scheduled_time;  
+
+
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..97d1dda
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,18 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC]; // which queue the process is currently in
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..fd15432
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,116 @@
+/* A C-program for MT19937: Real number version  (1998/4/6)    */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* When you use this, send an email to: matumoto@math.keio.ac.jp   */
+/* with an appropriate reference to your work.                     */
+
+/* REFERENCE                                                       */
+/* M. Matsumoto and T. Nishimura,                                  */
+/* "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform  */
+/* Pseudo-Random Number Generator",                                */
+/* ACM Transactions on Modeling and Computer Simulation,           */
+/* Vol. 8, No. 1, January 1998, pp 3--30.                          */
+
+// #include<stdio.h>
+
+/* Period parameters */
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+static int set = 0;
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(seed)
+    unsigned long seed;
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long  /* for integer generation */
+genrand(int upper)
+{
+    if( set == 0 ){
+        sgenrand(4357);
+        set = 1;
+    }
+
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+   // int mx = 1000;
+   // double val1 = ( (double)y * 2.3283064370807974e-10 );
+   // int val2 = val1*mx;
+   // return val2;
+    //return ( (double)y * 2.3283064370807974e-10 ); /* reals */
+    y = y & RAND_MAX;
+    y = y % upper;
+     return y;  /* for integer generation */
+}
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..3b94e61 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void); 
+extern uint64 sys_getpinfo(void); 
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets, 
+[SYS_getpinfo]   sys_getpinfo, 
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..92a8666 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22 
+#define SYS_getpinfo  23 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f5371c3 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,7 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
-
+#include "pstat.h"
 uint64
 sys_exit(void)
 {
@@ -89,3 +89,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+// offline 3
+// sets the ticket count
+uint64
+sys_settickets(void)
+{
+  int ticketCount;
+  argint(0,&ticketCount);
+  if( ticketCount < 0)
+    return -1;
+  else if( ticketCount == 0 ){
+    return settickets(DEFAULT_TICKET_COUNT);
+  }else{
+    return settickets(ticketCount);
+  }
+
+  return 0;
+}
+
+// offline 3
+// sets the ticket count
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if( addr < 0 )
+    return -1;
+  return getpinfo(addr);
+
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..4b48ea5 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -160,13 +160,33 @@ kerneltrap()
   w_sstatus(sstatus);
 }
 
+
+//offline-3 
+
+extern struct proc proc[NPROC];
+struct proc *p;
 void
 clockintr()
 {
+  int total_ticks=0;
+
   acquire(&tickslock);
   ticks++;
   wakeup(&ticks);
   release(&tickslock);
+
+  total_ticks=ticks;
+
+  if(total_ticks%BOOST_INTERVAL==0)
+  {
+    for(p=proc;p<&proc[NPROC];p++)
+    {
+      acquire(&p->lock);
+      if(p->state==RUNNABLE)
+        p->inQ=1;
+      release(&p->lock);
+    }
+  }
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..ba4f03a
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc,char *argv[])
+{
+    if( argc<2 )
+    {
+        fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+
+    if (settickets(atoi(argv[1])) < 0) 
+    {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+
+
+    if( fork() == 0 )
+    {
+        while(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..174be6f
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,29 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int
+main(int argc,char *argv[])
+{
+    struct pstat pst;
+    if (getpinfo(&pst) < 0)
+    {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+
+    printf("PID | In Use | inq | Original Tickets | Current Tickets | Time Slices\n");
+
+
+    for(int i=0;i<NPROC;i++)
+    {
+        if(  pst.inuse[i] != 0 ) 
+        {
+            printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n",pst.pid[i],pst.inuse[i],pst.inQ[i], pst.tickets_original[i], pst.tickets_current[i],pst.time_slices[i]);
+        }
+       
+
+    }
+    
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4d1b248 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat; 
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int); 
+int getpinfo(struct pstat*); 
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");

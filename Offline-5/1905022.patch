diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d5f9712
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..c387332 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..92c90b1 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -85,10 +85,10 @@ void            printfinit(void);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
-int             growproc(int);
+// int             growproc(int, uint64 *);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+// void            proc_freepagetable(pagetable_t, uint64, int);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +106,18 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+//offline-5
+
+//parameter changed
+int             growproc(int, uint64 *);
+void            proc_freepagetable(pagetable_t, uint64, int);
+//new syscall added
+int             thread_create(uint64 fcn,uint64 arg,uint64 stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+int             cond_sleep(uint64,int);
+void            cond_wakeup(uint64,int);
+void            memlock_init(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +177,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+// void            uvmfree(pagetable_t, uint64, int);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -174,6 +186,16 @@ int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 
+//offline-5
+
+//parameter changed
+void            uvmfree(pagetable_t, uint64, int);
+//new functions added
+int             uvmmirror(pagetable_t, pagetable_t, uint64,uint64);
+uint64          uvmunmirror(pagetable_t, uint64, uint64);
+
+
+
 // plic.c
 void            plicinit(void);
 void            plicinithart(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..22c40d8 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -126,13 +126,13 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, 0);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, 0);
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..245a868 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -20,6 +20,7 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    memlock_init();  // memlock
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..eda08cd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,9 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+//offline-5
+struct memlock memlock[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -43,6 +46,70 @@ proc_mapstacks(pagetable_t kpgtbl)
   }
 }
 
+//initialize memlock
+void 
+memlock_init(void)
+{
+  struct memlock *m;
+  for(m=memlock;m<&memlock[NPROC];m++)
+  {
+    initlock(&m->lock,"memlock");
+    m->count=0;
+    m->state=UNUSED;
+  }
+}
+
+//free memlock
+void
+freememlock(struct memlock *m)
+{
+  m->count=0;
+  m->state=UNUSED;
+}
+
+void
+memlock_add(struct memlock *m)
+{
+  if(m->state==UNUSED)
+    panic("Unused memlock");
+  m->count++;
+}
+
+void
+memlock_remove(struct memlock *m,struct proc* p)
+{
+  m->count--;
+  if(m->count<=0)
+  {
+    proc_freepagetable(p->pagetable, p->sz,0);
+    freememlock(m);
+  }
+
+  else
+  {
+    uvmunmirror(p->pagetable, p->sz,0);
+    proc_freepagetable(p->pagetable, 0,0);
+  }
+}
+
+void 
+wakeupOthers( struct proc* pp, void* chan)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()&& pp!=p){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
+
+
 // initialize the proc table.
 void
 procinit(void)
@@ -102,15 +169,45 @@ allocpid()
   return pid;
 }
 
+struct memlock*
+allocmemlock(void)
+{
+  struct memlock *m;
+  
+  for(m=memlock;m<&memlock[NPROC];m++)
+  {
+    acquire(&m->lock);
+    if(m->state==UNUSED)
+    {
+      m->state=USED;
+      return m;
+    }
+    else
+    {
+      release(&m->lock);
+    }
+  }
+  return 0;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc(int isThread)
 {
   struct proc *p;
 
+  struct memlock *m;
+
+  if(!isThread) //if not thread, then allocate mem.
+  {
+    if((m=allocmemlock())==0)
+      return 0;
+    memlock_add(m);
+  }
+
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
@@ -124,11 +221,16 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = isThread;
+
+  if(!isThread)
+  {
+    p->memlock=m;
+  }
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
-    release(&p->lock);
     return 0;
   }
 
@@ -136,10 +238,12 @@ found:
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
     freeproc(p);
-    release(&p->lock);
     return 0;
   }
 
+  if(!p->is_thread) //pid=memid
+    p->mem_id=p->pid;
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -155,11 +259,15 @@ found:
 static void
 freeproc(struct proc *p)
 {
+
+  struct memlock *m;
+
+
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  // if(p->pagetable)
+  //   proc_freepagetable(p->pagetable, p->sz, p->is_thread);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +277,17 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  p->mem_id=0;
+  p->is_thread=0;
+
+  if(p->pagetable)
+    memlock_remove(p->memlock,p);
+  
+  m=p->memlock;
+  p->memlock=0;
+  release(&p->lock);
+  release(&m->lock);
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -189,7 +308,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -198,7 +317,7 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -208,11 +327,12 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz, int isThread)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+
+  uvmfree(pagetable, sz, !isThread);
 }
 
 // a user program that calls exec("/init")
@@ -234,7 +354,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -252,26 +372,82 @@ userinit(void)
   p->state = RUNNABLE;
 
   release(&p->lock);
+  release(&p->memlock->lock);
 }
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
+enum growprocAction{ GROW,SHRINK,DEALLOC};
+int 
+growChild(struct proc* p, uint64 sz,int n,enum growprocAction action)
+{
+  for(struct proc* pp=proc;pp<&proc[NPROC];pp++)
+  {
+    if(pp!=p)
+    {
+      acquire(&pp->lock);
+      if(pp->mem_id==p->mem_id&& p->pid!=pp->pid)
+      {
+        if(pp->sz!=sz)
+        {
+          if(action==DEALLOC)
+          {
+            uvmunmirror(pp->pagetable,pp->sz,sz);
+            p->sz=sz;
+          }
+         
+        }
+        if(action==GROW)
+        {
+          if(uvmmirror(p->pagetable, pp->pagetable, sz, sz+n) < 0){
+            pp->sz=sz;
+            release(&pp->lock);
+            return -1;
+          }
+          pp->sz=p->sz;
+        }
+        else
+        {
+          pp->sz=uvmunmirror(pp->pagetable,sz,sz+n);
+        }
+      }
+      release(&pp->lock);
+     
+    }
+  }
+  return 0;
+}
 int
-growproc(int n)
+growproc(int n,uint64* oldsz)
 {
   uint64 sz;
   struct proc *p = myproc();
-
+  acquire(&p->memlock->lock);
+  // int mem_id=p->mem_id;
+  // int pid=p->pid;
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(&p->memlock->lock);
       return -1;
     }
+    if(growChild(p,p->sz,n,GROW)==-1)
+      goto bad;
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    growChild(p,p->sz,n,SHRINK);
   }
+  *oldsz=p->sz;
+  release(&p->memlock->lock);
   p->sz = sz;
   return 0;
+
+
+  bad:
+  uvmdealloc(p->pagetable,sz,p->sz);
+  growChild(p,p->sz,n,DEALLOC);
+  release(&p->memlock->lock);
+  return -1;
 }
 
 // Create a new process, copying the parent.
@@ -284,14 +460,14 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
+    // release(&np->lock);
     return -1;
   }
   np->sz = p->sz;
@@ -313,9 +489,12 @@ fork(void)
   pid = np->pid;
 
   release(&np->lock);
+  release(&np->memlock->lock);
 
   acquire(&wait_lock);
   np->parent = p;
+  if(p->is_thread)
+    np->parent = p->parent;
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -365,6 +544,20 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
+
+  for(struct proc *pp=proc;pp<&proc[NPROC];pp++)
+  {
+    acquire(&pp->lock);
+    if(pp->mem_id==p->pid)
+    {
+      pp->killed=1;
+      if(pp->state==SLEEPING)
+        pp->state=RUNNABLE;
+        
+    }
+    release(&pp->lock);
+  }
+
   acquire(&wait_lock);
 
   // Give any children to init.
@@ -380,9 +573,12 @@ exit(int status)
 
   release(&wait_lock);
 
+  //here diff from src
   // Jump into the scheduler, never to return.
+  // goto shala;
   sched();
   panic("zombie exit");
+  
 }
 
 // Wait for a child process to exit and return its pid.
@@ -390,6 +586,7 @@ exit(int status)
 int
 wait(uint64 addr)
 {
+  //printf("start\n");
   struct proc *pp;
   int havekids, pid;
   struct proc *p = myproc();
@@ -402,24 +599,37 @@ wait(uint64 addr)
     for(pp = proc; pp < &proc[NPROC]; pp++){
       if(pp->parent == p){
         // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->memlock->lock);
         acquire(&pp->lock);
+       
 
         havekids = 1;
         if(pp->state == ZOMBIE){
-          // Found one.
-          pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
-            release(&pp->lock);
-            release(&wait_lock);
-            return -1;
+
+          if(pp->is_thread)
+          {
+            freeproc(pp);
+            continue;
           }
-          freeproc(pp);
-          release(&pp->lock);
-          release(&wait_lock);
-          return pid;
+          else
+          {
+            pid = pp->pid;
+            if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                  sizeof(pp->xstate)) < 0)
+            {
+
+              release(&pp->lock);
+              release(&wait_lock);
+              return -1;
+            }
+            freeproc(pp);
+          // release(&pp->lock);
+            release(&wait_lock);
+            return pid;
         }
+      }
         release(&pp->lock);
+        release(&pp->memlock->lock);
       }
     }
 
@@ -669,7 +879,7 @@ procdump(void)
   struct proc *p;
   char *state;
 
-  printf("\n");
+  //printf("\n");
   for(p = proc; p < &proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
@@ -678,6 +888,209 @@ procdump(void)
     else
       state = "???";
     printf("%d %s %s", p->pid, state, p->name);
-    printf("\n");
+    //printf("\n");
   }
 }
+
+int thread_create(uint64 fcn, uint64 arg, uint64 stack){
+  //printf("hello\n");
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  if (p->killed) {
+    // already kill and/or reparented
+    return -1;
+  }
+
+//  Allocate process.
+  acquire(&p->memlock->lock);
+  if((np = allocproc(1)) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    freeproc(np);
+    //release(&np->lock);
+    return -1;
+  }
+  np->mem_id = p->mem_id;
+  np->memlock = p->memlock;
+  np->sz = p->sz;
+  memlock_add(np->memlock);
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->trapframe->epc = fcn;
+  np->trapframe->sp = stack + PGSIZE;
+  np->trapframe->sp -= (np->trapframe->sp % 16);
+  np->trapframe->a0 = arg;
+  np->is_thread = 1;
+  np->mem_id = p->mem_id;
+  //np->memlock = p->memlock;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+  release(&p->memlock->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  if(p->is_thread) 
+    np->parent = p->parent;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+int thread_join(int thread_id){
+
+  struct proc *pp;
+  struct proc *p = myproc();
+
+  int mem_id = p->mem_id;
+
+
+  acquire(&wait_lock);
+
+  int found=0;
+  for(pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    for(;;)
+    {
+      acquire(&pp->lock);
+
+      if(pp->mem_id==mem_id && pp->pid == thread_id)
+      {
+        found=1;
+        if(killed(p))
+        {
+          release(&pp->lock);
+          release(&wait_lock);
+          return -1;
+        }
+
+        if(pp->state==ZOMBIE)
+        {
+          pp->parent = initproc;
+          wakeupOthers(pp,initproc);
+          release(&pp->lock);
+          release(&wait_lock);
+          return thread_id;
+        }
+
+        release(&pp->lock);
+        sleep(pp, &wait_lock);
+      }
+
+      else if(found)
+      {
+        release(&pp->lock);
+        release(&wait_lock);
+        return thread_id;
+      }
+
+      else 
+        break;
+    }
+    release(&pp->lock);
+  }
+
+  release(&wait_lock);
+  return -1;
+}
+void
+thread_exit()
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+  if(p->parent==initproc)
+  {
+    wakeup(initproc);
+  }
+  else
+  {
+    wakeup(p);
+  }
+
+
+  acquire(&p->lock);
+  p->state=ZOMBIE;
+  release(&wait_lock);
+
+  sched();
+  panic("zombie exit");
+
+}
+int 
+cond_sleep(uint64 uaddr,int val)
+{
+  struct proc *p = myproc();
+  acquire(&p->memlock->lock);
+  //get the phy add
+  int* addr=(int *) walkaddr(p->pagetable,uaddr);
+
+  if(__sync_bool_compare_and_swap(addr,val,val))
+  {
+    sleep(addr,&p->memlock->lock);
+    release(&p->memlock->lock);
+    return 0;
+  }
+
+  release(&p->memlock->lock);
+  return -1;
+}
+
+void 
+cond_wakeup(uint64 uaddr,int n)
+{
+  struct proc *p = myproc();
+  acquire(&p->memlock->lock);
+  //get the phy add
+  int* addr=(int *) walkaddr(p->pagetable,uaddr);
+
+  for(struct proc* pp=proc;pp<&proc[NPROC];pp++)
+  {
+    acquire(&pp->lock);
+    if(pp->mem_id==p->mem_id && pp->chan==addr && pp->state==SLEEPING)
+    {
+      pp->state=RUNNABLE;
+      n--;
+    }
+    release(&pp->lock);
+  }
+  release(&p->memlock->lock);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..baf3e1b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,6 +81,17 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
+//memlock struct define
+
+struct memlock 
+{
+  struct spinlock lock;
+  //total ref count
+  int count;
+  enum procstate state;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +115,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  //offline-5
+  struct memlock* memlock;	// find places to set and release the locks
+  int is_thread;               // if it is thread
+  int mem_id;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..481b5ec 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_cond_sleep(void);
+extern uint64 sys_cond_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]     sys_thread_join,
+[SYS_thread_exit]     sys_thread_exit,
+[SYS_cond_sleep]      sys_cond_sleep,
+[SYS_cond_wakeup]     sys_cond_wakeup,
 };
 
 void
@@ -133,7 +143,6 @@ syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..f9f27b7 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_cond_sleep 25
+#define SYS_cond_wakeup 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..b22eda2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -9,6 +9,7 @@
 uint64
 sys_exit(void)
 {
+  // printf("debug exit\n");
   int n;
   argint(0, &n);
   exit(n);
@@ -30,6 +31,7 @@ sys_fork(void)
 uint64
 sys_wait(void)
 {
+  // printf("debug wait\n");
   uint64 p;
   argaddr(0, &p);
   return wait(p);
@@ -38,12 +40,13 @@ sys_wait(void)
 uint64
 sys_sbrk(void)
 {
+  printf("debug sbrk\n");
   uint64 addr;
   int n;
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if(growproc(n,&addr) < 0)
     return -1;
   return addr;
 }
@@ -51,6 +54,7 @@ sys_sbrk(void)
 uint64
 sys_sleep(void)
 {
+  // printf("debug sleep\n");
   int n;
   uint ticks0;
 
@@ -89,3 +93,56 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create(fcn,arg,stack);
+}
+
+
+uint64
+sys_thread_join(void)
+{
+  int threadId;
+  argint(0, &threadId);
+
+  return thread_join(threadId);
+}
+
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+
+uint64
+sys_cond_sleep(void)
+{
+  uint64 addr;
+  int n;
+  argaddr(0, &addr);
+  argint(1, &n);
+
+  return cond_sleep(addr, n);
+}
+
+
+uint64 
+sys_cond_wakeup(void)
+{
+  uint64 addr;
+  int n;
+  argaddr(0, &addr);
+  argint(1, &n);
+
+  cond_wakeup(addr,n);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..23428c0 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -102,6 +102,7 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
   return &pagetable[PX(0, va)];
 }
 
+
 // Look up a virtual address, return the physical address,
 // or 0 if not mapped.
 // Can only be used to look up user pages.
@@ -124,7 +125,6 @@ walkaddr(pagetable_t pagetable, uint64 va)
   pa = PTE2PA(*pte);
   return pa;
 }
-
 // add a mapping to the kernel page table.
 // only used when booting.
 // does not flush TLB or enable paging.
@@ -289,10 +289,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz, int isNotThread)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, isNotThread);
   freewalk(pagetable);
 }
 
@@ -321,7 +321,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+      kfree(mem); 
       goto err;
     }
   }
@@ -332,6 +332,52 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 start,uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start=PGROUNDUP(start);
+  // end=PGROUNDUP(end);
+
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      //kfree(mem); //no new page 
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+uint64 
+uvmunmirror(pagetable_t pagetable,uint64 oldsz,uint64 newsz)
+{
+  if(newsz>=oldsz)
+    return oldsz;
+  
+  if(PGROUNDUP(newsz)<PGROUNDUP(oldsz))
+  {
+    //no. of pages
+    int npages=(PGROUNDUP(oldsz)-PGROUNDUP(newsz))/PGSIZE;
+    uvmunmap(pagetable,PGROUNDUP(newsz),npages,0);
+  }
+  return newsz;
+
+}
+
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..5079e1c
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,105 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "queue.h"
+#include "thread_mutex.h"
+#include "sem_t.h"
+
+// a mutex object lock 
+// a semaphore object empty
+// a semaphore object full
+struct thread_mutex mutex;
+struct sem_t empty,full;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+	// initialize semaphore empty with 5
+	// initialize semaphore full with 0
+    thread_mutex_init(&mutex);
+    sem_init(&empty,5);
+    sem_init(&full,0);
+
+}
+
+struct queue q;
+
+void  ProducerFunc(void * arg)
+{	
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+
+		// wait for mutex lock
+        thread_mutex_lock(&mutex);
+		
+		sleep(1);	
+		push(&q,i);
+		printf("producer produced item %d\n",i);
+		
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mutex);	
+		// post semaphore full
+        sem_post(&full);
+	}
+    
+}
+
+void  ConsumerFunc(void * arg)
+{
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+        sem_wait(&full);
+		// wait for mutex lock
+        thread_mutex_lock(&mutex);
+ 		
+			
+		sleep(1);
+		int item = front(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mutex);
+		// post semaphore empty	
+        sem_post(&empty);	
+	}
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+    init(&q);
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2, r1, r2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	r1 = thread_join(thread1);
+  	r2 = thread_join(thread2);	
+
+    printf("%d %d\n", r1, r2);
+
+	thread_exit();
+	
+	
+	exit(0);
+}
diff --git a/user/pthread_cond.h b/user/pthread_cond.h
new file mode 100644
index 0000000..01e6726
--- /dev/null
+++ b/user/pthread_cond.h
@@ -0,0 +1,36 @@
+// #include "thread_mutex.h"
+
+
+struct pthread_cond
+{
+    int isSignal; 
+    int waitingThreadCount; //waitingThreadCount of waiting threads
+};
+
+void pthread_cond_init(struct pthread_cond *cond){
+    cond->isSignal = 0;
+	cond->waitingThreadCount = 0;
+}
+
+void pthread_cond_wait(struct pthread_cond *cond,struct thread_mutex *mutex){
+    __sync_fetch_and_and(&cond->isSignal, 0); //isSignal.val=0 (forcefully)
+    thread_mutex_unlock(mutex);
+
+	while(__sync_bool_compare_and_swap(&cond->isSignal, 0, 0)) { //campare val(cond->isSignal) with zero ; if successfull ,swap with 0
+		__sync_fetch_and_add(&cond->waitingThreadCount, 1); //number of waiting threads++
+		cond_sleep(&cond->isSignal, 0); //sleep
+		__sync_fetch_and_add(&cond->waitingThreadCount, -1); //number of waiting threads--
+	}
+	thread_mutex_lock(mutex);
+}
+
+
+void pthread_cond_signal(struct pthread_cond *cond){
+    __sync_synchronize();
+	__sync_bool_compare_and_swap(&cond->isSignal, 0, 1); //isSignal.val=1 (forcefully)
+
+    if (!__sync_bool_compare_and_swap(&cond->waitingThreadCount, 0, 0)) 
+    {
+		cond_wakeup(&cond->isSignal, 1);
+	}
+}
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..64717c1
--- /dev/null
+++ b/user/queue.h
@@ -0,0 +1,36 @@
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+
+
+void init(struct queue *q)
+{
+	q->front = 0;
+	q->rear = 0;
+	q->size = 0;
+}
+	
+void push(struct queue *q,int val)
+{
+	if(q->size==16)
+		return;
+	q->arr[q->rear] = val;
+	q->rear = (q->rear+1)%16;
+	q->size++;
+}
+
+int front(struct queue *q)
+{
+	return q->arr[q->front];
+}
+
+void pop(struct queue *q)
+{
+	if(q->size==0)
+		return;
+	q->front = (q->front+1)%16;
+	q->size--;
+}
\ No newline at end of file
diff --git a/user/sem_t.h b/user/sem_t.h
new file mode 100644
index 0000000..971c9e3
--- /dev/null
+++ b/user/sem_t.h
@@ -0,0 +1,35 @@
+// #include "thread_mutex.h"
+#include "pthread_cond.h"
+
+struct sem_t {
+    int count; 
+    struct thread_mutex m;
+    struct pthread_cond cv;
+};
+
+
+
+void sem_init(struct sem_t *sem, int count)
+{
+    sem->count = count;
+    thread_mutex_init(&sem->m);
+    pthread_cond_init(&sem->cv);
+}
+
+void sem_wait(struct sem_t *sem)
+ {
+    thread_mutex_lock(&sem->m);
+    while (sem->count == 0) {
+        pthread_cond_wait(&sem->cv, &sem->m);
+    }
+    sem->count--;
+    thread_mutex_unlock(&sem->m);
+}
+
+void sem_post(struct sem_t *sem) 
+{
+    thread_mutex_lock(&sem->m);
+    sem->count++;
+    pthread_cond_signal(&sem->cv);
+    thread_mutex_unlock(&sem->m);
+}
diff --git a/user/thread.c b/user/thread.c
new file mode 100644
index 0000000..8ed2f70
--- /dev/null
+++ b/user/thread.c
@@ -0,0 +1,83 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile unsigned int delay (unsigned int d) {
+    unsigned int i;
+    for (i = 0; i < d; i++) {
+        __asm volatile( "nop" ::: );
+    }
+
+    return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    //printf("arg: %p\n", (uint64)arg);
+
+    struct balance *b = (struct balance*) arg;
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+          thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+    }
+
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    uint64 fcn = (uint64)do_work;
+    printf("fcn: %p\n", fcn);
+    printf("b1 arg: %p\n", (uint64)&b1);
+    printf("b2 arg: %p\n", (uint64)&b2);
+
+    thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+
+    thread1 = thread_create(do_work, (void*)&b1, s1);
+    thread2 = thread_create(do_work, (void*)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+        thread1, r1, thread2, r2, total_balance);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..7396c86
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,40 @@
+
+
+// Mutual exclusion lock.
+struct thread_mutex {
+  uint8 mlocked;       // Is the lock held
+};
+
+
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->mlocked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  while(__sync_lock_test_and_set(&lk->mlocked, 1) != 0)
+  {
+    sleep(1);
+  }
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+
+  __sync_synchronize();
+
+
+  __sync_lock_release(&lk->mlocked);
+
+
+}
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..f6c4acc
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,36 @@
+
+
+// Mutual exclusion lock.
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held
+};
+
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+
+  __sync_synchronize();
+
+
+  __sync_lock_release(&lk->locked);
+
+
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..f63cf8e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//offline-5
+int thread_create(void (*fcn)(void*),void*,void*);
+int thread_join(int);
+void thread_exit(void);
+int cond_sleep(int*,int);
+int cond_wakeup(int*,int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..250e33d 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("cond_sleep");
+entry("cond_wakeup");
